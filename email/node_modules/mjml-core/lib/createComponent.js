"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.HeadComponent = exports.BodyComponent = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _isNil2 = _interopRequireDefault(require("lodash/isNil"));

var _filter2 = _interopRequireDefault(require("lodash/filter"));

var _find2 = _interopRequireDefault(require("lodash/find"));

var _kebabCase2 = _interopRequireDefault(require("lodash/kebabCase"));

var _reduce2 = _interopRequireDefault(require("lodash/reduce"));

var _identity2 = _interopRequireDefault(require("lodash/identity"));

var _forEach2 = _interopRequireDefault(require("lodash/forEach"));

var _get2 = _interopRequireDefault(require("lodash/get"));

var _mjmlParserXml = _interopRequireDefault(require("mjml-parser-xml"));

var _shorthandParser = _interopRequireWildcard(require("./helpers/shorthandParser"));

var _formatAttributes = _interopRequireDefault(require("./helpers/formatAttributes"));

var _jsonToXML = _interopRequireDefault(require("./helpers/jsonToXML"));

var _components = _interopRequireWildcard(require("./components"));

class Component {
  static getTagName() {
    return this.componentName || (0, _kebabCase2.default)(this.name);
  }

  static isRawElement() {
    return !!this.rawElement;
  }

  constructor(initialDatas = {}) {
    const {
      attributes = {},
      children = [],
      content = '',
      context = {},
      props = {},
      globalAttributes = {}
    } = initialDatas;
    this.props = { ...props,
      children,
      content
    };
    this.attributes = (0, _formatAttributes.default)({ ...this.constructor.defaultAttributes,
      ...globalAttributes,
      ...attributes
    }, this.constructor.allowedAttributes);
    this.context = context;
    return this;
  }

  getChildContext() {
    return this.context;
  }

  getAttribute(name) {
    return this.attributes[name];
  }

  getContent() {
    return this.props.content.trim();
  }

  renderMJML(mjml, options = {}) {
    if (typeof mjml === 'string') {
      // supports returning siblings elements from a custom component
      const partialMjml = (0, _mjmlParserXml.default)(`<fragment>${mjml}</fragment>`, { ...options,
        components: _components.default,
        ignoreIncludes: true
      });
      return partialMjml.children.map(child => this.context.processing(child, this.context)).join('');
    }

    return this.context.processing(mjml, this.context);
  }

}

(0, _defineProperty2.default)(Component, "defaultAttributes", {});

class BodyComponent extends Component {
  // eslint-disable-next-line class-methods-use-this
  getStyles() {
    return {};
  }

  getShorthandAttrValue(attribute, direction) {
    const mjAttributeDirection = this.getAttribute(`${attribute}-${direction}`);
    const mjAttribute = this.getAttribute(attribute);

    if (mjAttributeDirection) {
      return parseInt(mjAttributeDirection, 10);
    }

    if (!mjAttribute) {
      return 0;
    }

    return (0, _shorthandParser.default)(mjAttribute, direction);
  }

  getShorthandBorderValue(direction) {
    const borderDirection = direction && this.getAttribute(`border-${direction}`);
    const border = this.getAttribute('border');
    return (0, _shorthandParser.borderParser)(borderDirection || border || '0');
  }

  getBoxWidths() {
    const {
      containerWidth
    } = this.context;
    const parsedWidth = parseInt(containerWidth, 10);
    const paddings = this.getShorthandAttrValue('padding', 'right') + this.getShorthandAttrValue('padding', 'left');
    const borders = this.getShorthandBorderValue('right') + this.getShorthandBorderValue('left');
    return {
      totalWidth: parsedWidth,
      borders,
      paddings,
      box: parsedWidth - paddings - borders
    };
  }

  htmlAttributes(attributes) {
    const specialAttributes = {
      style: v => this.styles(v),
      default: _identity2.default
    };
    return (0, _reduce2.default)(attributes, (output, v, name) => {
      const value = (specialAttributes[name] || specialAttributes.default)(v);

      if (!(0, _isNil2.default)(value)) {
        return `${output} ${name}="${value}"`;
      }

      return output;
    }, '');
  }

  styles(styles) {
    let stylesObject;

    if (styles) {
      if (typeof styles === 'string') {
        stylesObject = (0, _get2.default)(this.getStyles(), styles);
      } else {
        stylesObject = styles;
      }
    }

    return (0, _reduce2.default)(stylesObject, (output, value, name) => {
      if (!(0, _isNil2.default)(value)) {
        return `${output}${name}:${value};`;
      }

      return output;
    }, '');
  }

  renderChildren(childrens, options = {}) {
    const {
      props = {},
      renderer = component => component.render(),
      attributes = {},
      rawXML = false
    } = options;
    childrens = childrens || this.props.children;

    if (rawXML) {
      return childrens.map(child => (0, _jsonToXML.default)(child)).join('\n');
    }

    const sibling = childrens.length;
    const rawComponents = (0, _filter2.default)(_components.default, c => c.isRawElement());
    const nonRawSiblings = childrens.filter(child => !(0, _find2.default)(rawComponents, c => c.getTagName() === child.tagName)).length;
    let output = '';
    let index = 0;
    (0, _forEach2.default)(childrens, children => {
      const component = (0, _components.initComponent)({
        name: children.tagName,
        initialDatas: { ...children,
          attributes: { ...attributes,
            ...children.attributes
          },
          context: this.getChildContext(),
          props: { ...props,
            first: index === 0,
            index,
            last: index + 1 === sibling,
            sibling,
            nonRawSiblings
          }
        }
      });

      if (component !== null) {
        output += renderer(component);
      }

      index++; // eslint-disable-line no-plusplus
    });
    return output;
  }

}

exports.BodyComponent = BodyComponent;

class HeadComponent extends Component {
  static getTagName() {
    return this.componentName || (0, _kebabCase2.default)(this.name);
  }

  handlerChildren() {
    const childrens = this.props.children;
    return childrens.map(children => {
      const component = (0, _components.initComponent)({
        name: children.tagName,
        initialDatas: { ...children,
          context: this.getChildContext()
        }
      });

      if (!component) {
        // eslint-disable-next-line no-console
        console.error(`No matching component for tag : ${children.tagName}`);
        return null;
      }

      if (component.handler) {
        component.handler();
      }

      if (component.render) {
        return component.render();
      }

      return null;
    });
  }

}

exports.HeadComponent = HeadComponent;